name: "Pre-merge Quality-Control: Ruby"
on:
  push:
    paths:
      - ruby/**
      - rust/**
      - .github/workflows/qc_ruby.yml
  pull_request:
    branches: [main]
    paths:
      - ruby/**
      - rust/**
      - .github/workflows/qc_ruby.yml
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['2.7', '3.0', '3.1', '3.2']
        rust-toolchain: ['stable', 'nightly']
      fail-fast: false

    name: "Test"

    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/ruby/Gemfile

    steps:
      - uses: actions/checkout@v3

      - name: Install rust
        id: rust-install
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}

      - name: Install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ruby/ext/enquo/target/
            ruby/tmp/x86_64-linux/enquo/*/target/
          key: ${{ runner.os }}-${{ steps.rust-install.outputs.cachekey }}-ruby

      - name: Run testsuite
        working-directory: ruby
        env:
          RUSTFLAGS: -D warnings
        run: |
          rustup override set ${{ matrix.rust-toolchain }}
          bundle exec rake test

  qc:
    runs-on: ubuntu-latest
    name: "Quality Control"

    strategy:
      matrix:
        rust-toolchain: ['stable', 'nightly']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Install rust
        id: rust-install
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}
          components: rustfmt, clippy

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ruby/ext/enquo/target/
            ruby/tmp/x86_64-linux/enquo/*/target/
          key: ${{ runner.os }}-${{ steps.rust-install.outputs.cachekey }}-ruby

      - name: Check formatting
        working-directory: ruby/ext/enquo
        run: |
          cargo +${{ steps.rust-install.outputs.name }} fmt --check

      - name: Consult Clippy
        working-directory: ruby/ext/enquo
        run: |
          cargo +${{ steps.rust-install.outputs.name }} clippy -- -D warnings
